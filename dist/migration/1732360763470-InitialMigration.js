"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InitialMigration1732360763470 = void 0;
class InitialMigration1732360763470 {
    constructor() {
        this.name = 'InitialMigration1732360763470';
    }
    async up(queryRunner) {
        await queryRunner.query(`CREATE TABLE "users" ("id" SERIAL NOT NULL, "name" character varying NOT NULL, "email" character varying NOT NULL, "password" character varying NOT NULL, "role" character varying NOT NULL DEFAULT 'admin', "created_at" TIMESTAMP NOT NULL DEFAULT now(), "updated_at" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "UQ_97672ac88f789774dd47f7c8be3" UNIQUE ("email"), CONSTRAINT "PK_a3ffb1c0c8416b9fc6f907b7433" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "comments" ("id" SERIAL NOT NULL, "name" character varying NOT NULL, "content" character varying NOT NULL, "phone" character varying NOT NULL, "created_at" TIMESTAMP NOT NULL DEFAULT now(), "article_id" integer NOT NULL, CONSTRAINT "PK_8bf68bc960f2b69e818bdb90dcb" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "articles" ("id" SERIAL NOT NULL, "title" character varying NOT NULL, "image" character varying NOT NULL, "content" character varying NOT NULL, "view_count" integer NOT NULL, "slug" character varying NOT NULL, "status" character varying NOT NULL, "is_breaking" boolean NOT NULL DEFAULT false, "created_at" TIMESTAMP NOT NULL DEFAULT now(), "updated_at" TIMESTAMP NOT NULL DEFAULT now(), "category_id" integer NOT NULL, CONSTRAINT "UQ_1123ff6815c5b8fec0ba9fec370" UNIQUE ("slug"), CONSTRAINT "PK_0a6e2c450d83e0b6052c2793334" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "categories" ("id" SERIAL NOT NULL, "name" character varying NOT NULL, CONSTRAINT "UQ_8b0be371d28245da6e4f4b61878" UNIQUE ("name"), CONSTRAINT "PK_24dbc6126a28ff948da33e97d3b" PRIMARY KEY ("id"))`);
        await queryRunner.query(`ALTER TABLE "comments" ADD CONSTRAINT "FK_e9b498cca509147e73808f9e593" FOREIGN KEY ("article_id") REFERENCES "articles"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "articles" ADD CONSTRAINT "FK_e025eeefcdb2a269c42484ee43f" FOREIGN KEY ("category_id") REFERENCES "categories"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
    }
    async down(queryRunner) {
        await queryRunner.query(`ALTER TABLE "articles" DROP CONSTRAINT "FK_e025eeefcdb2a269c42484ee43f"`);
        await queryRunner.query(`ALTER TABLE "comments" DROP CONSTRAINT "FK_e9b498cca509147e73808f9e593"`);
        await queryRunner.query(`DROP TABLE "categories"`);
        await queryRunner.query(`DROP TABLE "articles"`);
        await queryRunner.query(`DROP TABLE "comments"`);
        await queryRunner.query(`DROP TABLE "users"`);
    }
}
exports.InitialMigration1732360763470 = InitialMigration1732360763470;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTczMjM2MDc2MzQ3MC1Jbml0aWFsTWlncmF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21pZ3JhdGlvbi8xNzMyMzYwNzYzNDcwLUluaXRpYWxNaWdyYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsTUFBYSw2QkFBNkI7SUFBMUM7UUFDSSxTQUFJLEdBQUcsK0JBQStCLENBQUE7SUFvQjFDLENBQUM7SUFsQlUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxXQUF3QjtRQUNwQyxNQUFNLFdBQVcsQ0FBQyxLQUFLLENBQUMsMGFBQTBhLENBQUMsQ0FBQztRQUNwYyxNQUFNLFdBQVcsQ0FBQyxLQUFLLENBQUMsMlNBQTJTLENBQUMsQ0FBQztRQUNyVSxNQUFNLFdBQVcsQ0FBQyxLQUFLLENBQUMsOGlCQUE4aUIsQ0FBQyxDQUFDO1FBQ3hrQixNQUFNLFdBQVcsQ0FBQyxLQUFLLENBQUMsa05BQWtOLENBQUMsQ0FBQztRQUM1TyxNQUFNLFdBQVcsQ0FBQyxLQUFLLENBQUMsdUtBQXVLLENBQUMsQ0FBQztRQUNqTSxNQUFNLFdBQVcsQ0FBQyxLQUFLLENBQUMsMEtBQTBLLENBQUMsQ0FBQztJQUN4TSxDQUFDO0lBRU0sS0FBSyxDQUFDLElBQUksQ0FBQyxXQUF3QjtRQUN0QyxNQUFNLFdBQVcsQ0FBQyxLQUFLLENBQUMseUVBQXlFLENBQUMsQ0FBQztRQUNuRyxNQUFNLFdBQVcsQ0FBQyxLQUFLLENBQUMseUVBQXlFLENBQUMsQ0FBQztRQUNuRyxNQUFNLFdBQVcsQ0FBQyxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUNuRCxNQUFNLFdBQVcsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUNqRCxNQUFNLFdBQVcsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUNqRCxNQUFNLFdBQVcsQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUNsRCxDQUFDO0NBRUo7QUFyQkQsc0VBcUJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWlncmF0aW9uSW50ZXJmYWNlLCBRdWVyeVJ1bm5lciB9IGZyb20gXCJ0eXBlb3JtXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgSW5pdGlhbE1pZ3JhdGlvbjE3MzIzNjA3NjM0NzAgaW1wbGVtZW50cyBNaWdyYXRpb25JbnRlcmZhY2Uge1xyXG4gICAgbmFtZSA9ICdJbml0aWFsTWlncmF0aW9uMTczMjM2MDc2MzQ3MCdcclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgdXAocXVlcnlSdW5uZXI6IFF1ZXJ5UnVubmVyKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgYXdhaXQgcXVlcnlSdW5uZXIucXVlcnkoYENSRUFURSBUQUJMRSBcInVzZXJzXCIgKFwiaWRcIiBTRVJJQUwgTk9UIE5VTEwsIFwibmFtZVwiIGNoYXJhY3RlciB2YXJ5aW5nIE5PVCBOVUxMLCBcImVtYWlsXCIgY2hhcmFjdGVyIHZhcnlpbmcgTk9UIE5VTEwsIFwicGFzc3dvcmRcIiBjaGFyYWN0ZXIgdmFyeWluZyBOT1QgTlVMTCwgXCJyb2xlXCIgY2hhcmFjdGVyIHZhcnlpbmcgTk9UIE5VTEwgREVGQVVMVCAnYWRtaW4nLCBcImNyZWF0ZWRfYXRcIiBUSU1FU1RBTVAgTk9UIE5VTEwgREVGQVVMVCBub3coKSwgXCJ1cGRhdGVkX2F0XCIgVElNRVNUQU1QIE5PVCBOVUxMIERFRkFVTFQgbm93KCksIENPTlNUUkFJTlQgXCJVUV85NzY3MmFjODhmNzg5Nzc0ZGQ0N2Y3YzhiZTNcIiBVTklRVUUgKFwiZW1haWxcIiksIENPTlNUUkFJTlQgXCJQS19hM2ZmYjFjMGM4NDE2YjlmYzZmOTA3Yjc0MzNcIiBQUklNQVJZIEtFWSAoXCJpZFwiKSlgKTtcclxuICAgICAgICBhd2FpdCBxdWVyeVJ1bm5lci5xdWVyeShgQ1JFQVRFIFRBQkxFIFwiY29tbWVudHNcIiAoXCJpZFwiIFNFUklBTCBOT1QgTlVMTCwgXCJuYW1lXCIgY2hhcmFjdGVyIHZhcnlpbmcgTk9UIE5VTEwsIFwiY29udGVudFwiIGNoYXJhY3RlciB2YXJ5aW5nIE5PVCBOVUxMLCBcInBob25lXCIgY2hhcmFjdGVyIHZhcnlpbmcgTk9UIE5VTEwsIFwiY3JlYXRlZF9hdFwiIFRJTUVTVEFNUCBOT1QgTlVMTCBERUZBVUxUIG5vdygpLCBcImFydGljbGVfaWRcIiBpbnRlZ2VyIE5PVCBOVUxMLCBDT05TVFJBSU5UIFwiUEtfOGJmNjhiYzk2MGYyYjY5ZTgxOGJkYjkwZGNiXCIgUFJJTUFSWSBLRVkgKFwiaWRcIikpYCk7XHJcbiAgICAgICAgYXdhaXQgcXVlcnlSdW5uZXIucXVlcnkoYENSRUFURSBUQUJMRSBcImFydGljbGVzXCIgKFwiaWRcIiBTRVJJQUwgTk9UIE5VTEwsIFwidGl0bGVcIiBjaGFyYWN0ZXIgdmFyeWluZyBOT1QgTlVMTCwgXCJpbWFnZVwiIGNoYXJhY3RlciB2YXJ5aW5nIE5PVCBOVUxMLCBcImNvbnRlbnRcIiBjaGFyYWN0ZXIgdmFyeWluZyBOT1QgTlVMTCwgXCJ2aWV3X2NvdW50XCIgaW50ZWdlciBOT1QgTlVMTCwgXCJzbHVnXCIgY2hhcmFjdGVyIHZhcnlpbmcgTk9UIE5VTEwsIFwic3RhdHVzXCIgY2hhcmFjdGVyIHZhcnlpbmcgTk9UIE5VTEwsIFwiaXNfYnJlYWtpbmdcIiBib29sZWFuIE5PVCBOVUxMIERFRkFVTFQgZmFsc2UsIFwiY3JlYXRlZF9hdFwiIFRJTUVTVEFNUCBOT1QgTlVMTCBERUZBVUxUIG5vdygpLCBcInVwZGF0ZWRfYXRcIiBUSU1FU1RBTVAgTk9UIE5VTEwgREVGQVVMVCBub3coKSwgXCJjYXRlZ29yeV9pZFwiIGludGVnZXIgTk9UIE5VTEwsIENPTlNUUkFJTlQgXCJVUV8xMTIzZmY2ODE1YzViOGZlYzBiYTlmZWMzNzBcIiBVTklRVUUgKFwic2x1Z1wiKSwgQ09OU1RSQUlOVCBcIlBLXzBhNmUyYzQ1MGQ4M2UwYjYwNTJjMjc5MzMzNFwiIFBSSU1BUlkgS0VZIChcImlkXCIpKWApO1xyXG4gICAgICAgIGF3YWl0IHF1ZXJ5UnVubmVyLnF1ZXJ5KGBDUkVBVEUgVEFCTEUgXCJjYXRlZ29yaWVzXCIgKFwiaWRcIiBTRVJJQUwgTk9UIE5VTEwsIFwibmFtZVwiIGNoYXJhY3RlciB2YXJ5aW5nIE5PVCBOVUxMLCBDT05TVFJBSU5UIFwiVVFfOGIwYmUzNzFkMjgyNDVkYTZlNGY0YjYxODc4XCIgVU5JUVVFIChcIm5hbWVcIiksIENPTlNUUkFJTlQgXCJQS18yNGRiYzYxMjZhMjhmZjk0OGRhMzNlOTdkM2JcIiBQUklNQVJZIEtFWSAoXCJpZFwiKSlgKTtcclxuICAgICAgICBhd2FpdCBxdWVyeVJ1bm5lci5xdWVyeShgQUxURVIgVEFCTEUgXCJjb21tZW50c1wiIEFERCBDT05TVFJBSU5UIFwiRktfZTliNDk4Y2NhNTA5MTQ3ZTczODA4ZjllNTkzXCIgRk9SRUlHTiBLRVkgKFwiYXJ0aWNsZV9pZFwiKSBSRUZFUkVOQ0VTIFwiYXJ0aWNsZXNcIihcImlkXCIpIE9OIERFTEVURSBOTyBBQ1RJT04gT04gVVBEQVRFIE5PIEFDVElPTmApO1xyXG4gICAgICAgIGF3YWl0IHF1ZXJ5UnVubmVyLnF1ZXJ5KGBBTFRFUiBUQUJMRSBcImFydGljbGVzXCIgQUREIENPTlNUUkFJTlQgXCJGS19lMDI1ZWVlZmNkYjJhMjY5YzQyNDg0ZWU0M2ZcIiBGT1JFSUdOIEtFWSAoXCJjYXRlZ29yeV9pZFwiKSBSRUZFUkVOQ0VTIFwiY2F0ZWdvcmllc1wiKFwiaWRcIikgT04gREVMRVRFIE5PIEFDVElPTiBPTiBVUERBVEUgTk8gQUNUSU9OYCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIGRvd24ocXVlcnlSdW5uZXI6IFF1ZXJ5UnVubmVyKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgYXdhaXQgcXVlcnlSdW5uZXIucXVlcnkoYEFMVEVSIFRBQkxFIFwiYXJ0aWNsZXNcIiBEUk9QIENPTlNUUkFJTlQgXCJGS19lMDI1ZWVlZmNkYjJhMjY5YzQyNDg0ZWU0M2ZcImApO1xyXG4gICAgICAgIGF3YWl0IHF1ZXJ5UnVubmVyLnF1ZXJ5KGBBTFRFUiBUQUJMRSBcImNvbW1lbnRzXCIgRFJPUCBDT05TVFJBSU5UIFwiRktfZTliNDk4Y2NhNTA5MTQ3ZTczODA4ZjllNTkzXCJgKTtcclxuICAgICAgICBhd2FpdCBxdWVyeVJ1bm5lci5xdWVyeShgRFJPUCBUQUJMRSBcImNhdGVnb3JpZXNcImApO1xyXG4gICAgICAgIGF3YWl0IHF1ZXJ5UnVubmVyLnF1ZXJ5KGBEUk9QIFRBQkxFIFwiYXJ0aWNsZXNcImApO1xyXG4gICAgICAgIGF3YWl0IHF1ZXJ5UnVubmVyLnF1ZXJ5KGBEUk9QIFRBQkxFIFwiY29tbWVudHNcImApO1xyXG4gICAgICAgIGF3YWl0IHF1ZXJ5UnVubmVyLnF1ZXJ5KGBEUk9QIFRBQkxFIFwidXNlcnNcImApO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=